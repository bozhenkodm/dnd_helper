# Generated by Django 5.1.4 on 2024-12-12 19:48

import django.db.models.deletion
import multiselectfield.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0003_feat'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.AlterField(
            model_name='class',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='weapon_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AlterField(
            model_name='subclass',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='weapon_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.CreateModel(
            name='Constraint',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to={
                            'app_label': 'base',
                            'model__in': (
                                'Race',
                                'Class',
                                'FunctionalTemplate',
                                'ParagonPath',
                                'MagicItemType',
                                'Feat',
                            ),
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.contenttype',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Constraint',
                'verbose_name_plural': 'Constraints',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to={
                            'app_label': 'base',
                            'model__in': (
                                'Race',
                                'Class',
                                'Subclass',
                                'FunctionalTemplate',
                                'ParagonPath',
                                'MagicItemType',
                                'Feat',
                            ),
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.contenttype',
                    ),
                ),
                (
                    'constraint',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.constraint',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='AvailabilityCondition',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'weapon_categories',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Available weapon categories',
                    ),
                ),
                (
                    'armor_types',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (0, 'Тканевый'),
                            (2, 'Кожаный'),
                            (3, 'Шкурный'),
                            (6, 'Кольчуга'),
                            (7, 'Чешуйчатый'),
                            (8, 'Латный'),
                        ],
                        max_length=11,
                        null=True,
                        verbose_name='Available armor types',
                    ),
                ),
                (
                    'shields',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[(1, 'Лёгкий щит'), (2, 'Тяжелый щит')],
                        max_length=3,
                        null=True,
                        verbose_name='Available shields',
                    ),
                ),
                (
                    'implement_types',
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={'primary_end__isnull': True},
                        related_name='implement_%(app_label)s_%(class)s_wielders',
                        to='base.weapontype',
                        verbose_name='Available implement types',
                    ),
                ),
                (
                    'weapon_types',
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={'primary_end__isnull': True},
                        related_name='weapon_%(app_label)s_%(class)s_wielders',
                        to='base.weapontype',
                        verbose_name='Available weapon types',
                    ),
                ),
                (
                    'constraint',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.constraint',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArmamentCondition',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'slot',
                    models.CharField(
                        choices=[
                            ('secondary_hand', 'Дополнительная рука'),
                            ('no_hand', 'Не занимает руки'),
                            ('primary_hand', 'Основная рука'),
                        ],
                        max_length=14,
                    ),
                ),
                (
                    'weapon_groups',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('CROSSBOW', 'Арбалет'),
                            ('UNARMED', 'Безоружное'),
                            ('MACE', 'Булава'),
                            ('POLEARM', 'Древковое'),
                            ('PICK', 'Кирка'),
                            ('SPEAR', 'Копьё'),
                            ('BOW', 'Лук'),
                            ('LIGHT_BLADE', 'Лёгкий клинок'),
                            ('HAMMER', 'Молот'),
                            ('STAFF', 'Посох'),
                            ('SLING', 'Праща'),
                            ('AXE', 'Топор'),
                            ('HEAVY_BLADE', 'Тяжелый клинок'),
                            ('FLAIL', 'Цеп'),
                        ],
                        max_length=97,
                        null=True,
                        verbose_name='Weapon group',
                    ),
                ),
                (
                    'weapon_categories',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Weapon category',
                    ),
                ),
                (
                    'weapon_types',
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={'is_enhanceable': True},
                        related_name='magic_weapons_conditions',
                        to='base.weapontype',
                        verbose_name='Weapon type',
                    ),
                ),
                (
                    'constraint',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.constraint',
                    ),
                ),
            ],
        ),
    ]
