# Generated by Django 5.1.4 on 2024-12-11 23:51

import django.db.models.deletion
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models

import base.constants.constants
import base.models.bonuses
import base.models.defences
import base.models.powers
import base.models.skills


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ability',
            fields=[
                (
                    'title',
                    models.CharField(
                        choices=[
                            ('INTELLIGENCE', 'Интеллект'),
                            ('DEXTERITY', 'Ловкость'),
                            ('WISDOM', 'Мудрость'),
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=12,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('ordering', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ArmorType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=100, verbose_name='Title')),
                (
                    'base_armor_type',
                    models.SmallIntegerField(
                        choices=[
                            (0, 'Тканевый'),
                            (2, 'Кожаный'),
                            (3, 'Шкурный'),
                            (6, 'Кольчуга'),
                            (7, 'Чешуйчатый'),
                            (8, 'Латный'),
                        ],
                        verbose_name='Armor type',
                    ),
                ),
                (
                    'bonus_armor_class',
                    models.SmallIntegerField(
                        default=0, verbose_name='Additional armor class'
                    ),
                ),
                (
                    'speed_penalty',
                    models.SmallIntegerField(default=0, verbose_name='Speed penalty'),
                ),
                (
                    'skill_penalty',
                    models.SmallIntegerField(default=0, verbose_name='Skills penalty'),
                ),
                (
                    'minimal_enhancement',
                    models.SmallIntegerField(
                        default=0, verbose_name='Minimal enhancement'
                    ),
                ),
                (
                    'fortitude_bonus',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Fortitude bonus'
                    ),
                ),
                (
                    'reflex_bonus',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Reflex bonus'
                    ),
                ),
                (
                    'will_bonus',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Will bonus'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Armor type',
                'verbose_name_plural': 'Armor types',
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'weapon_categories',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Available weapon categories',
                    ),
                ),
                (
                    'armor_types',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (0, 'Тканевый'),
                            (2, 'Кожаный'),
                            (3, 'Шкурный'),
                            (6, 'Кольчуга'),
                            (7, 'Чешуйчатый'),
                            (8, 'Латный'),
                        ],
                        max_length=11,
                        null=True,
                        verbose_name='Available armor types',
                    ),
                ),
                (
                    'shields',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[(1, 'Лёгкий щит'), (2, 'Тяжелый щит')],
                        max_length=3,
                        null=True,
                        verbose_name='Available shields',
                    ),
                ),
                (
                    'name',
                    models.SlugField(
                        choices=[
                            ('INVOKER', 'Апостол'),
                            ('ARTIFICER', 'Артефактор'),
                            ('BARD', 'Бард'),
                            ('BLADESINGER', 'Блэйдсингер'),
                            ('VAMPIRE', 'Вампир'),
                            ('BARBARIAN', 'Варвар'),
                            ('WARLORD', 'Военачальник'),
                            ('WARPRIEST', 'Военный священник (жрец)'),
                            ('FIGHTER', 'Воин'),
                            ('WIZARD', 'Волшебник'),
                            ('DRUID', 'Друид'),
                            ('PRIEST', 'Жрец'),
                            ('SEEKER', 'Ловчий'),
                            ('AVENGER', 'Каратель'),
                            ('WARLOCK', 'Колдун'),
                            ('SWORDMAGE', 'Мечник-маг'),
                            ('MONK', 'Монах'),
                            ('PALADIN', 'Паладин'),
                            ('ROGUE', 'Плут'),
                            ('RUNEPRIEST', 'Рунный жрец'),
                            ('RANGER', 'Следопыт'),
                            ('HEXBLADE', 'Хексблэйд (колдун)'),
                            ('WARDEN', 'Хранитель'),
                            ('SORCERER', 'Чародей'),
                            ('SHAMAN', 'Шаман'),
                        ],
                        max_length=11,
                    ),
                ),
                ('name_display', models.CharField(max_length=24, verbose_name='Title')),
                (
                    'fortitude',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Fortitude'
                    ),
                ),
                (
                    'reflex',
                    models.PositiveSmallIntegerField(default=0, verbose_name='Reflex'),
                ),
                (
                    'will',
                    models.PositiveSmallIntegerField(default=0, verbose_name='Will'),
                ),
                (
                    'surges',
                    models.PositiveSmallIntegerField(default=6, verbose_name='Surges'),
                ),
                (
                    'hit_points_per_level',
                    models.PositiveSmallIntegerField(
                        default=5, verbose_name='Hit points per level'
                    ),
                ),
                (
                    'hit_points_per_level_npc',
                    models.PositiveSmallIntegerField(
                        default=8, verbose_name='Hit points per level'
                    ),
                ),
                (
                    'power_source',
                    models.CharField(
                        choices=[
                            ('MARTIAL', 'Воинский'),
                            ('DIVINE', 'Духовный'),
                            ('ARCANE', 'Магический'),
                            ('PRIMAL', 'Первородный'),
                            ('PSIONIC', 'Псионический'),
                            ('SHADOW', 'Теневой'),
                        ],
                        max_length=7,
                        verbose_name='Power source',
                    ),
                ),
                (
                    'role',
                    models.CharField(
                        choices=[
                            ('STRIKER', 'Атакующий'),
                            ('DEFENDER', 'Защитник'),
                            ('CONTROLLER', 'Контроллер'),
                            ('LEADER', 'Лидер'),
                        ],
                        max_length=10,
                        verbose_name='Role',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ('name_display',),
            },
        ),
        migrations.CreateModel(
            name='Encounter',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'short_description',
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        verbose_name='Краткое описание',
                    ),
                ),
                (
                    'description',
                    models.TextField(blank=True, null=True, verbose_name='Описание'),
                ),
                (
                    'roll_for_players',
                    models.BooleanField(
                        default=False, verbose_name='Кидать инициативу за игроков?'
                    ),
                ),
                (
                    'turn_number',
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name='Номер хода'
                    ),
                ),
                (
                    'is_passed',
                    models.BooleanField(default=False, verbose_name='Сцена сыграна'),
                ),
            ],
            options={
                'verbose_name': 'Сцена',
                'verbose_name_plural': 'Сцены',
            },
        ),
        migrations.CreateModel(
            name='FunctionalTemplate',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                (
                    'min_level',
                    models.SmallIntegerField(default=0, verbose_name='Minimal level'),
                ),
                (
                    'armor_class_bonus',
                    models.SmallIntegerField(
                        default=0, verbose_name='Armor class bonus'
                    ),
                ),
                (
                    'fortitude_bonus',
                    models.SmallIntegerField(default=0, verbose_name='Fortitude bonus'),
                ),
                (
                    'reflex_bonus',
                    models.SmallIntegerField(default=0, verbose_name='Reflex bonus'),
                ),
                (
                    'will_bonus',
                    models.SmallIntegerField(default=0, verbose_name='Will bonus'),
                ),
                (
                    'save_bonus',
                    models.SmallIntegerField(
                        default=2, verbose_name='Saving throws bonus'
                    ),
                ),
                (
                    'action_points_bonus',
                    models.SmallIntegerField(default=1, verbose_name='Action points'),
                ),
                (
                    'hit_points_per_level',
                    models.SmallIntegerField(default=8, verbose_name='Hits per level'),
                ),
            ],
            options={
                'verbose_name': 'Functional template',
                'verbose_name_plural': 'Functional templates',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='MagicItemType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=100, verbose_name='Title')),
                (
                    'min_level',
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name='Minimal level'
                    ),
                ),
                (
                    'max_level',
                    models.PositiveSmallIntegerField(
                        default=30, verbose_name='Maximum level'
                    ),
                ),
                (
                    'step',
                    models.PositiveSmallIntegerField(
                        default=5, verbose_name='Level step'
                    ),
                ),
                (
                    'category',
                    models.CharField(
                        choices=[
                            ('COMMON', 'Обычный'),
                            ('UNCOMMON', 'Необычный'),
                            ('RARE', 'Редкий'),
                        ],
                        default=base.constants.constants.MagicItemCategory['UNCOMMON'],
                        max_length=8,
                        verbose_name='Category',
                    ),
                ),
                (
                    'picture',
                    models.ImageField(
                        blank=True, null=True, upload_to='items', verbose_name='Picture'
                    ),
                ),
                (
                    'source',
                    models.CharField(
                        blank=True,
                        help_text='Book and page',
                        max_length=20,
                        null=True,
                        verbose_name='Source',
                    ),
                ),
                (
                    'slot',
                    models.CharField(
                        choices=[
                            ('ARMOR', 'Броня'),
                            ('HEAD', 'Голова'),
                            ('RING', 'Кольца'),
                            ('FEET', 'Обувь'),
                            ('WEAPON', 'Оружие'),
                            ('HANDS', 'Перчатки'),
                            ('WAIST', 'Пояс'),
                            ('ARMS', 'Предплечья/Щит'),
                            ('TATOO', 'Татуировка'),
                            ('WONDROUS_ITEMS', 'Чудесный предмет'),
                            ('NECK', 'Шея'),
                        ],
                        max_length=14,
                        null=True,
                        verbose_name='Slot',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Magic item type',
                'verbose_name_plural': 'Magic item types',
            },
        ),
        migrations.CreateModel(
            name='PCParty',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True, default='', max_length=20, verbose_name='Name'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Party',
                'verbose_name_plural': 'Parties',
            },
        ),
        migrations.CreateModel(
            name='PlayerCharacters',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=50, verbose_name='Имя')),
                ('armor_class', models.PositiveSmallIntegerField(verbose_name='КД')),
                (
                    'fortitude',
                    models.PositiveSmallIntegerField(verbose_name='Стойкость'),
                ),
                ('reflex', models.PositiveSmallIntegerField(verbose_name='Реакция')),
                ('will', models.PositiveSmallIntegerField(verbose_name='Воля')),
                (
                    'initiative',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Инициатива'
                    ),
                ),
                (
                    'passive_perception',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Пассивная внимательность'
                    ),
                ),
                (
                    'passive_insight',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Пассивная проницательность'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Игровой персонаж',
                'verbose_name_plural': 'Игровые персонажи',
            },
        ),
        migrations.CreateModel(
            name='Combatants',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(max_length=50, verbose_name='Участник сцены'),
                ),
                (
                    'armor_class',
                    models.PositiveSmallIntegerField(default=0, verbose_name='КД'),
                ),
                (
                    'fortitude',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Стойкость'
                    ),
                ),
                (
                    'reflex',
                    models.PositiveSmallIntegerField(default=0, verbose_name='Реакция'),
                ),
                (
                    'will',
                    models.PositiveSmallIntegerField(default=0, verbose_name='Воля'),
                ),
                (
                    'initiative',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Инициатива'
                    ),
                ),
                (
                    'number',
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name='Количество однотипных'
                    ),
                ),
                (
                    'encounter',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='combatants',
                        to='base.encounter',
                        verbose_name='Сцена',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Участник сцены (Монстрятник)',
                'verbose_name_plural': 'Участники сцены (Монстрятник)',
            },
        ),
        migrations.CreateModel(
            name='EncounterParticipants',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=50)),
                ('initiative', models.FloatField()),
                ('ac', models.PositiveSmallIntegerField()),
                ('fortitude', models.PositiveSmallIntegerField()),
                ('reflex', models.PositiveSmallIntegerField()),
                ('will', models.PositiveSmallIntegerField()),
                ('number', models.SmallIntegerField(null=True)),
                ('status', models.TextField(default='')),
                (
                    'encounter',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='participants',
                        to='base.encounter',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='MagicArmItemType',
            fields=[
                (
                    'magicitemtype_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='base.magicitemtype',
                    ),
                ),
                (
                    'shield_slots',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[(1, 'Лёгкий щит'), (2, 'Тяжелый щит')],
                        max_length=3,
                        null=True,
                        verbose_name='Shield slots',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Magic shield/arms slot item type',
                'verbose_name_plural': 'Magic shield/arms slot item types',
            },
            bases=('base.magicitemtype',),
        ),
        migrations.CreateModel(
            name='MagicArmorType',
            fields=[
                (
                    'magicitemtype_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='base.magicitemtype',
                    ),
                ),
                (
                    'armor_type_slots',
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            (0, 'Тканевый'),
                            (2, 'Кожаный'),
                            (3, 'Шкурный'),
                            (6, 'Кольчуга'),
                            (7, 'Чешуйчатый'),
                            (8, 'Латный'),
                        ],
                        max_length=11,
                        verbose_name='Armor type slots',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Magic armor type',
                'verbose_name_plural': 'Magic armor types',
            },
            bases=('base.magicitemtype',),
        ),
        migrations.CreateModel(
            name='ArmsSlotItem',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('level', models.SmallIntegerField(default=0, verbose_name='Level')),
                (
                    'shield',
                    models.SmallIntegerField(
                        choices=[
                            (0, '----------'),
                            (1, 'Лёгкий щит'),
                            (2, 'Тяжелый щит'),
                        ],
                        default=base.constants.constants.ShieldTypeIntEnum['NONE'],
                        verbose_name='Shield',
                    ),
                ),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Hand item/shield',
                'verbose_name_plural': 'Hand items/shields',
                'unique_together': {('magic_item_type', 'level', 'shield')},
            },
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('level', models.SmallIntegerField(default=0, verbose_name='Level')),
                (
                    'armor_type',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.armortype',
                        verbose_name='Armor type',
                    ),
                ),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Armor',
                'verbose_name_plural': 'Armors',
            },
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'base_strength',
                    models.SmallIntegerField(default=10, verbose_name='Сила (базовая)'),
                ),
                (
                    'base_constitution',
                    models.SmallIntegerField(
                        default=10, verbose_name='Телосложение (базовое)'
                    ),
                ),
                (
                    'base_dexterity',
                    models.SmallIntegerField(
                        default=10, verbose_name='Ловкость (базовая)'
                    ),
                ),
                (
                    'base_intelligence',
                    models.SmallIntegerField(
                        default=10, verbose_name='Интеллект (базовый)'
                    ),
                ),
                (
                    'base_wisdom',
                    models.SmallIntegerField(
                        default=10, verbose_name='Мудрость (базовая)'
                    ),
                ),
                (
                    'base_charisma',
                    models.SmallIntegerField(
                        default=10, verbose_name='Харизма (базовая)'
                    ),
                ),
                (
                    'base_attack_ability',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=12,
                        null=True,
                        verbose_name='Base attack ability',
                    ),
                ),
                (
                    'level4_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 4 уровне',
                    ),
                ),
                (
                    'level8_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 8 уровне',
                    ),
                ),
                (
                    'level14_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 14 уровне',
                    ),
                ),
                (
                    'level18_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 18 уровне',
                    ),
                ),
                (
                    'level24_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 24 уровне',
                    ),
                ),
                (
                    'level28_bonus_abilities',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=60,
                        null=True,
                        verbose_name='Бонус характеристики на 28 уровне',
                    ),
                ),
                (
                    'experience',
                    models.IntegerField(default=0, verbose_name='Experience'),
                ),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                (
                    'description',
                    models.TextField(blank=True, null=True, verbose_name='Description'),
                ),
                (
                    'subclass_id',
                    models.SmallIntegerField(default=0, verbose_name='Subclass'),
                ),
                (
                    'sex',
                    models.CharField(
                        choices=[('M', 'Муж'), ('F', 'Жен'), ('N', 'Н/Д')],
                        max_length=1,
                        verbose_name='Sex',
                    ),
                ),
                (
                    'level',
                    models.PositiveSmallIntegerField(default=1, verbose_name='Level'),
                ),
                (
                    'is_bonus_applied',
                    models.BooleanField(
                        default=True,
                        help_text='Бонус за уровень уменьшает количество исцелений',
                        verbose_name='Применять бонус за уровень?',
                    ),
                ),
                (
                    'armor',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='base.armor',
                        verbose_name='Armor',
                    ),
                ),
                (
                    'arms_slot',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='npc_hands',
                        to='base.armsslotitem',
                        verbose_name='Arms slot',
                    ),
                ),
                (
                    'functional_template',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.functionaltemplate',
                        verbose_name='Functional template',
                    ),
                ),
                (
                    'klass',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.class',
                        verbose_name='Class',
                    ),
                ),
                (
                    'owner',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'var_bonus_ability',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='base.ability',
                        verbose_name='Выборочный бонус характеристики',
                    ),
                ),
            ],
            options={
                'verbose_name': 'NPC',
                'verbose_name_plural': 'NPCS',
            },
            bases=(
                base.models.defences.NPCDefenceMixin,
                base.models.skills.NPCSkillMixin,
                base.models.powers.PowerMixin,
                models.Model,
                base.models.bonuses.BonusMixin,
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='npcs',
            field=models.ManyToManyField(
                blank=True, to='base.npc', verbose_name='Мастерские персонажи'
            ),
        ),
        migrations.CreateModel(
            name='ParagonPath',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                (
                    'description',
                    models.TextField(blank=True, null=True, verbose_name='Description'),
                ),
                (
                    'klass',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.class',
                        verbose_name='Class',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Paragon path',
                'verbose_name_plural': 'Paragon paths',
            },
        ),
        migrations.AddField(
            model_name='npc',
            name='paragon_path',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.paragonpath',
                verbose_name='Paragon path',
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='party',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.pcparty',
                verbose_name='Party',
            ),
        ),
        migrations.AddField(
            model_name='pcparty',
            name='members',
            field=models.ManyToManyField(
                to='base.playercharacters', verbose_name='Members'
            ),
        ),
        migrations.CreateModel(
            name='CombatantsPC',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('initiative', models.FloatField(default=0, verbose_name='Инициатива')),
                (
                    'encounter',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='combatants_pcs',
                        to='base.encounter',
                        verbose_name='Сцена',
                    ),
                ),
                (
                    'pc',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.playercharacters',
                        verbose_name='Игровой персонаж',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Участник сцены (ИП)',
                'verbose_name_plural': 'Участники сцены (ИП)',
            },
        ),
        migrations.CreateModel(
            name='Power',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=100, verbose_name='Title')),
                (
                    'description',
                    models.TextField(
                        blank=True, default='', verbose_name='Description'
                    ),
                ),
                (
                    'frequency',
                    models.CharField(
                        choices=[
                            ('PASSIVE', 'Пассивный'),
                            ('AT_WILL', 'Неограниченный'),
                            ('ENCOUNTER', 'На сцену'),
                            ('DAILY', 'На день'),
                        ],
                        max_length=9,
                        verbose_name='Usage frequency',
                    ),
                ),
                (
                    'action_type',
                    models.CharField(
                        choices=[
                            ('STANDARD', 'Стандартное действие'),
                            ('MINOR', 'Малое действие'),
                            ('FREE', 'Свободное действие'),
                            ('MOVEMENT', 'Действие движения'),
                            ('PROVOKED', 'Провоцированное действие'),
                            ('INTERRUPT', 'Немедленное прерывание'),
                            ('REACTION', 'Немедленный ответ'),
                            ('NO_ACTION', 'Нет действия'),
                        ],
                        default=base.constants.constants.PowerActionTypeEnum[
                            'STANDARD'
                        ],
                        help_text='Choose, if power frequency is not passive',
                        max_length=9,
                        null=True,
                        verbose_name='Action type',
                    ),
                ),
                (
                    'subclass',
                    models.SmallIntegerField(default=0, verbose_name='Subclass'),
                ),
                ('level', models.SmallIntegerField(default=0, verbose_name='Level')),
                (
                    'attack_ability',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                        ],
                        max_length=12,
                        null=True,
                        verbose_name='Attack ability',
                    ),
                ),
                (
                    'attack_bonus',
                    models.SmallIntegerField(default=0, verbose_name='Attack bonus'),
                ),
                (
                    'defence',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('ARMOR_CLASS', 'КД'),
                            ('FORTITUDE', 'Стойкость'),
                            ('REFLEX', 'Реакция'),
                            ('WILL', 'Воля'),
                        ],
                        help_text='defence',
                        max_length=11,
                        null=True,
                        verbose_name='against',
                    ),
                ),
                (
                    'effect_type',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('NONE', ''),
                            ('ZONE', 'Зона'),
                            ('CONJURATION', 'Иллюзия'),
                            ('HEALING', 'Исцеление'),
                            ('RELIABLE', 'Надежный'),
                            ('CHARM', 'Очарование'),
                            ('POLYMORPH', 'Превращение'),
                            ('SLEEP', 'Сон'),
                            ('STANCE', 'Стойка'),
                            ('FEAR', 'Страх'),
                            ('TELEPORTATION', 'Телепортация'),
                            ('RATTLING', 'Ужасающий'),
                            ('INVIGORATING', 'Укрепляющий'),
                            ('RAGE', 'Ярость'),
                        ],
                        default=base.constants.constants.PowerEffectTypeEnum['NONE'],
                        max_length=113,
                        null=True,
                        verbose_name='Effect type',
                    ),
                ),
                (
                    'damage_type',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('UNTYPED', 'Без типа'),
                            ('THUNDER', 'Звук'),
                            ('RADIANT', 'Излучение'),
                            ('ACID', 'Кислота'),
                            ('NECROTIC', 'Некротическая энергия'),
                            ('FIRE', 'Огонь'),
                            ('PSYCHIC', 'Психическая энергия'),
                            ('FORCE', 'Силовое поле'),
                            ('COLD', 'Холод'),
                            ('LIGHTNING', 'Электричество'),
                            ('POISON', 'Яд'),
                        ],
                        default=base.constants.constants.PowerDamageTypeEnum['UNTYPED'],
                        max_length=78,
                        null=True,
                        verbose_name='Damage type',
                    ),
                ),
                (
                    'dice_number',
                    models.SmallIntegerField(default=1, verbose_name='Dice number'),
                ),
                (
                    'damage_dice',
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (4, 'k4'),
                            (6, 'k6'),
                            (8, 'k8'),
                            (10, 'k10'),
                            (12, 'k12'),
                            (20, 'k20'),
                            (100, 'k100'),
                        ],
                        null=True,
                        verbose_name='Damage dice',
                    ),
                ),
                (
                    'accessory_type',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('TWO_WEAPONS', 'Два оружия'),
                            ('IMPLEMENT', 'Инструмент'),
                            ('WEAPON', 'Оружие'),
                            ('WEAPON_AND_IMPLEMENT', 'Оружие и инструмент'),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name='Accessory type',
                    ),
                ),
                (
                    'range_type',
                    models.CharField(
                        choices=[
                            ('MELEE_WEAPON', 'Рукопашное оружие'),
                            ('MELEE', 'Рукопашное'),
                            ('RANGED', 'Дальнобойное'),
                            (
                                'MELEE_RANGED_WEAPON',
                                'Рукопашное или дальнобойное оружие',
                            ),
                            ('RANGED_WEAPON', 'Дальнобойное оружие'),
                            ('BURST', 'Вспышка'),
                            ('BLAST', 'Волна'),
                            ('WALL', 'Стена'),
                            ('PERSONAL', 'Персональный'),
                        ],
                        default=base.constants.constants.PowerRangeTypeEnum['PERSONAL'],
                        max_length=19,
                        verbose_name='Range type',
                    ),
                ),
                ('range', models.SmallIntegerField(default=0, verbose_name='Distance')),
                ('burst', models.SmallIntegerField(default=0, verbose_name='Area')),
                (
                    'functional_template',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='powers',
                        to='base.functionaltemplate',
                        verbose_name='Functional template',
                    ),
                ),
                (
                    'klass',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='powers',
                        to='base.class',
                        verbose_name='Class',
                    ),
                ),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='powers',
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
                (
                    'paragon_path',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='powers',
                        to='base.paragonpath',
                        verbose_name='Paragon path',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Power',
                'verbose_name_plural': 'Powers',
            },
        ),
        migrations.AddField(
            model_name='npc',
            name='powers',
            field=models.ManyToManyField(
                blank=True, to='base.power', verbose_name='Powers'
            ),
        ),
        migrations.CreateModel(
            name='PowerProperty',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'title',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('ATTACK', 'Атака'),
                            ('OTHER', 'Другое'),
                            ('SPECIAL', 'Особенность'),
                            ('HIT', 'Попадание'),
                            ('MISS', 'Промах'),
                            ('REQUIREMENT', 'Требование'),
                            ('TRIGGER', 'Триггер'),
                            ('TARGET', 'Цель'),
                            ('EFFECT', 'Эффект'),
                        ],
                        max_length=11,
                        null=True,
                    ),
                ),
                ('level', models.SmallIntegerField(default=1, verbose_name='Level')),
                (
                    'subclass',
                    models.SmallIntegerField(
                        choices=[(0, '---------')], default=0, verbose_name='Subclass'
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        blank=True, default='', verbose_name='Description'
                    ),
                ),
                ('order', models.SmallIntegerField(default=0, verbose_name='Order')),
                (
                    'power',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='properties',
                        to='base.power',
                        verbose_name='Power',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Power Property',
                'verbose_name_plural': 'Power Properties',
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        choices=[
                            ('BUGBEAR', 'Багбир'),
                            ('VRYLOKA', 'Врылока'),
                            ('HAMADRYAD', 'Гамадриада'),
                            ('GITHZERAI', 'Гитзерай'),
                            ('GNOLL', 'Гнолл'),
                            ('GNOME', 'Гном'),
                            ('GOBLIN', 'Гоблин'),
                            ('GOLIATH', 'Голиаф'),
                            ('DWARF', 'Дварф'),
                            ('DEVA', 'Дев'),
                            ('GENASI_WINDSOUL', 'Дженази, ветер'),
                            ('GENASI_WATERSOUL', 'Дженази, вода'),
                            ('GENASI_EARTHSOUL', 'Дженази, земля'),
                            ('GENASI_FIRESOUL', 'Дженази, огонь'),
                            ('GENASI_STORMSOUL', 'Дженази, шторм'),
                            ('WILDEN', 'Дикарь'),
                            ('DOPPELGANGER', 'Доппельгангер'),
                            ('DRAGONBORN', 'Драконорожденный'),
                            ('DROW', 'Дроу'),
                            ('DUERGAR', 'Дуэргар'),
                            ('KALASHTAR', 'Калаштар'),
                            ('KENKU', 'Кенку'),
                            ('KOBOLD', 'Кобольд'),
                            ('WARFORGED', 'Кованый'),
                            ('BLADELING', 'Мечерождённый'),
                            ('MINOTAUR', 'Минотавр'),
                            ('MUL', 'Мул'),
                            ('ORC', 'Орк'),
                            ('PIXIE', 'Пикси'),
                            ('HALFORC', 'Полуорк'),
                            ('HALFLING', 'Полурослик'),
                            ('HALFELF', 'Полуэльф'),
                            ('SATYR', 'Сатир'),
                            ('TIEFLING', 'Тифлинг'),
                            ('THRI_KREEN', 'Три-крин'),
                            ('HOBGOBLIN', 'Хобгоблин'),
                            ('HUMAN', 'Человек'),
                            ('SHADAR_KAI', 'Шадар-Кай'),
                            ('SHIFTER_RAZORCLAW', 'Шифтер, бритволапый'),
                            ('SHIFTER_LONGTEETH', 'Шифтер, длиннозубый'),
                            ('ELADRIN', 'Эладрин'),
                            ('ELF', 'Эльф'),
                        ],
                        max_length=17,
                        unique=True,
                        verbose_name='Title',
                    ),
                ),
                ('name_display', models.CharField(max_length=19, verbose_name='Title')),
                (
                    'speed',
                    models.PositiveSmallIntegerField(default=6, verbose_name='Speed'),
                ),
                (
                    'vision',
                    models.CharField(
                        choices=[
                            ('NORMAL', 'Обычное'),
                            ('TWILIGHT', 'Сумеречное'),
                            ('DARK', 'Тёмное'),
                        ],
                        default=base.constants.constants.VisionEnum['NORMAL'],
                        max_length=8,
                        verbose_name='Vision',
                    ),
                ),
                (
                    'size',
                    models.CharField(
                        choices=[
                            ('TINY', 'Крошечный'),
                            ('SMALL', 'Маленький'),
                            ('AVERAGE', 'Средний'),
                            ('BIG', 'Большой'),
                            ('LARGE', 'Огромный'),
                        ],
                        default=base.constants.constants.SizeEnum['AVERAGE'],
                        max_length=7,
                        verbose_name='Size',
                    ),
                ),
                (
                    'is_sociable',
                    models.BooleanField(
                        default=True,
                        help_text='Social races are used for random npc generation',
                        verbose_name='Is race social?',
                    ),
                ),
                (
                    'const_ability_bonus',
                    models.ManyToManyField(
                        related_name='races_with_const',
                        to='base.ability',
                        verbose_name='Constant ability bonuses',
                    ),
                ),
                (
                    'var_ability_bonus',
                    models.ManyToManyField(
                        related_name='races',
                        to='base.ability',
                        verbose_name='Selective ability bonuses',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Race',
                'verbose_name_plural': 'Races',
            },
        ),
        migrations.AddField(
            model_name='power',
            name='race',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='paragonpath',
            name='race',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='race',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.CreateModel(
            name='SimpleMagicItem',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('level', models.SmallIntegerField(default=0, verbose_name='Level')),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Magic item',
                'verbose_name_plural': 'Magic items',
                'unique_together': {('magic_item_type', 'level')},
            },
        ),
        migrations.CreateModel(
            name='FeetSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='HandsSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='HeadSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='NeckSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='RingsSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='WaistSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                (
                    'title',
                    models.CharField(
                        choices=[
                            ('ACROBATICS', 'Акробатика'),
                            ('ATHLETICS', 'Атлетика'),
                            ('PERCEPTION', 'Внимательность'),
                            ('THIEVERY', 'Воровство'),
                            ('ENDURANCE', 'Выносливость'),
                            ('INTIMIDATE', 'Запугивание'),
                            ('STREETWISE', 'Знание улиц'),
                            ('HISTORY', 'История'),
                            ('ARCANA', 'Магия'),
                            ('BLUFF', 'Обман'),
                            ('DIPLOMACY', 'Переговоры'),
                            ('DUNGEONEERING', 'Подземелья'),
                            ('NATURE', 'Природа'),
                            ('INSIGHT', 'Проницательность'),
                            ('RELIGION', 'Религия'),
                            ('STEALTH', 'Скрытность'),
                            ('HEAL', 'Целительство'),
                        ],
                        max_length=13,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('ordering', models.PositiveSmallIntegerField(default=1)),
                (
                    'based_on',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='base.ability'
                    ),
                ),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.AddField(
            model_name='power',
            name='skill',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.skill',
                verbose_name='Skill',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='trained_skills',
            field=models.ManyToManyField(
                to='base.skill', verbose_name='Trained skills'
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='mandatory_skills',
            field=models.ManyToManyField(
                to='base.skill', verbose_name='Mandatory skills'
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='trainable_skills',
            field=models.ManyToManyField(
                related_name='classes',
                to='base.skill',
                verbose_name='Выборочно тренируемые навыки',
            ),
        ),
        migrations.CreateModel(
            name='Subclass',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'weapon_categories',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Available weapon categories',
                    ),
                ),
                (
                    'armor_types',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (0, 'Тканевый'),
                            (2, 'Кожаный'),
                            (3, 'Шкурный'),
                            (6, 'Кольчуга'),
                            (7, 'Чешуйчатый'),
                            (8, 'Латный'),
                        ],
                        max_length=11,
                        null=True,
                        verbose_name='Available armor types',
                    ),
                ),
                (
                    'shields',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[(1, 'Лёгкий щит'), (2, 'Тяжелый щит')],
                        max_length=3,
                        null=True,
                        verbose_name='Available shields',
                    ),
                ),
                ('name', models.CharField(max_length=40, verbose_name='Name')),
                ('slug', models.CharField(max_length=40, verbose_name='Slug')),
                (
                    'subclass_id',
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name='Subclass id'
                    ),
                ),
                (
                    'klass',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='subclasses',
                        to='base.class',
                        verbose_name='Class',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Subclass',
                'verbose_name_plural': 'Subclasses',
            },
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Title'
                    ),
                ),
                (
                    'source',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('CLASS', 'Бонус класса'),
                            ('ITEM', 'Бонус предмета'),
                            ('POWER', 'Бонус таланта'),
                            ('FEAT', 'Бонус черты'),
                            ('RACE', 'Расовый бонус'),
                        ],
                        max_length=5,
                        null=True,
                        verbose_name='Bonus source',
                    ),
                ),
                (
                    'min_level',
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name='Minimal level'
                    ),
                ),
                (
                    'bonus_type',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('STRENGTH', 'Сила'),
                            ('CONSTITUTION', 'Телосложение'),
                            ('DEXTERITY', 'Ловкость'),
                            ('INTELLIGENCE', 'Интеллект'),
                            ('WISDOM', 'Мудрость'),
                            ('CHARISMA', 'Харизма'),
                            ('ACROBATICS', 'Акробатика'),
                            ('ATHLETICS', 'Атлетика'),
                            ('PERCEPTION', 'Внимательность'),
                            ('THIEVERY', 'Воровство'),
                            ('ENDURANCE', 'Выносливость'),
                            ('INTIMIDATE', 'Запугивание'),
                            ('STREETWISE', 'Знание улиц'),
                            ('HISTORY', 'История'),
                            ('ARCANA', 'Магия'),
                            ('BLUFF', 'Обман'),
                            ('DIPLOMACY', 'Переговоры'),
                            ('DUNGEONEERING', 'Подземелья'),
                            ('NATURE', 'Природа'),
                            ('INSIGHT', 'Проницательность'),
                            ('RELIGION', 'Религия'),
                            ('STEALTH', 'Скрытность'),
                            ('HEAL', 'Целительство'),
                            ('ARMOR_CLASS', 'КД'),
                            ('FORTITUDE', 'Стойкость'),
                            ('REFLEX', 'Реакция'),
                            ('WILL', 'Воля'),
                            ('SPEED', 'Скорость'),
                            ('INITIATIVE', 'Инициатива'),
                            ('SURGE', 'Значение исцеления'),
                            ('SURGES', 'Количество исцелений'),
                            ('ATTACK', 'Атака'),
                            ('DAMAGE', 'Урон'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Bonus type',
                    ),
                ),
                (
                    'value',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Value'
                    ),
                ),
                (
                    'klass',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        to='base.class',
                        verbose_name='Class',
                    ),
                ),
                (
                    'functional_template',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        to='base.functionaltemplate',
                        verbose_name='Functional template',
                    ),
                ),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
                (
                    'paragon_path',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        to='base.paragonpath',
                        verbose_name='Paragon path',
                    ),
                ),
                (
                    'power',
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            'frequency': base.constants.constants.PowerFrequencyEnum[
                                'PASSIVE'
                            ],
                            'level': 0,
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        related_query_name='bonus',
                        to='base.power',
                        verbose_name='Power',
                    ),
                ),
                (
                    'race',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='bonuses',
                        to='base.race',
                        verbose_name='Race',
                    ),
                ),
                (
                    'subclass_fk',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.subclass',
                        verbose_name='Subclass',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Bonus',
                'verbose_name_plural': 'Bonuses',
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('level', models.SmallIntegerField(default=0, verbose_name='Level')),
                (
                    'magic_item_type',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='base.magicitemtype',
                        verbose_name='Magic item type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Weapon',
                'verbose_name_plural': 'Weapon',
            },
        ),
        migrations.AddField(
            model_name='npc',
            name='no_hand',
            field=models.ForeignKey(
                blank=True,
                help_text="Armament that doesn't take hand slot",
                limit_choices_to={'weapon_type__handedness': 'FREE'},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_no_hands',
                to='base.weapon',
                verbose_name='No hand implement',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='primary_hand',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(
                    ('weapon_type__handedness', 'FREE'), _negated=True
                ),
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_primary_hands',
                to='base.weapon',
                verbose_name='Primary hand',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='secondary_hand',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(
                    ('weapon_type__handedness', 'FREE'), _negated=True
                ),
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_secondary_hands',
                to='base.weapon',
                verbose_name='Secondary hand',
            ),
        ),
        migrations.CreateModel(
            name='WeaponType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(blank=True, max_length=30, verbose_name='Title'),
                ),
                (
                    'slug',
                    models.CharField(
                        blank=True, max_length=30, unique=True, verbose_name='Slug'
                    ),
                ),
                (
                    'handedness',
                    models.CharField(
                        choices=[
                            ('ONE', 'Одноручное'),
                            ('TWO', 'Двуручное'),
                            ('VERSATILE', 'Универсальное'),
                            ('FREE', 'Не занимает руки'),
                            ('DOUBLE', 'Двойное'),
                        ],
                        max_length=9,
                        null=True,
                        verbose_name='Handedness',
                    ),
                ),
                (
                    'group',
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ('CROSSBOW', 'Арбалет'),
                            ('UNARMED', 'Безоружное'),
                            ('MACE', 'Булава'),
                            ('POLEARM', 'Древковое'),
                            ('PICK', 'Кирка'),
                            ('SPEAR', 'Копьё'),
                            ('BOW', 'Лук'),
                            ('LIGHT_BLADE', 'Лёгкий клинок'),
                            ('HAMMER', 'Молот'),
                            ('STAFF', 'Посох'),
                            ('SLING', 'Праща'),
                            ('AXE', 'Топор'),
                            ('HEAVY_BLADE', 'Тяжелый клинок'),
                            ('FLAIL', 'Цеп'),
                        ],
                        max_length=97,
                        null=True,
                        verbose_name='Group',
                    ),
                ),
                (
                    'category',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        verbose_name='Category',
                    ),
                ),
                ('range', models.PositiveSmallIntegerField(default=0)),
                (
                    'prof_bonus',
                    models.PositiveSmallIntegerField(
                        default=2, verbose_name='Prof bonus'
                    ),
                ),
                (
                    'dice',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (4, 'k4'),
                            (6, 'k6'),
                            (8, 'k8'),
                            (10, 'k10'),
                            (12, 'k12'),
                        ],
                        null=True,
                    ),
                ),
                ('dice_number', models.PositiveSmallIntegerField(default=1)),
                ('brutal', models.PositiveSmallIntegerField(default=0)),
                (
                    'thrown',
                    models.CharField(
                        choices=[
                            ('LIGHT', 'Лёгкое метательное'),
                            ('HEAVY', 'Тяжёлое метательное'),
                        ],
                        max_length=5,
                        null=True,
                    ),
                ),
                ('is_off_hand', models.BooleanField(default=False)),
                ('is_high_crit', models.BooleanField(default=False)),
                ('is_reach', models.BooleanField(default=False)),
                (
                    'load',
                    models.CharField(
                        choices=[
                            ('FREE', 'Зарядка: Свободное действие'),
                            ('MINOR', 'Зарядка: Малое действие'),
                        ],
                        max_length=5,
                        null=True,
                    ),
                ),
                ('is_small', models.BooleanField(default=False)),
                ('is_defensive', models.BooleanField(default=False)),
                ('is_big', models.BooleanField(default=False)),
                (
                    'is_enhanceable',
                    models.BooleanField(
                        default=True, verbose_name='Is weapon enhanceable?'
                    ),
                ),
                (
                    'primary_end',
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='secondary_end',
                        to='base.weapontype',
                        verbose_name='Primary end',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Weapon type',
                'verbose_name_plural': 'Weapon types',
            },
        ),
        migrations.AddField(
            model_name='weapon',
            name='weapon_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='weapons',
                to='base.weapontype',
                verbose_name='Weapon type',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='implement_types',
            field=models.ManyToManyField(
                limit_choices_to={'primary_end__isnull': True},
                related_name='implement_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='weapon_types',
            field=models.ManyToManyField(
                limit_choices_to={'primary_end__isnull': True},
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AddField(
            model_name='race',
            name='weapon_types',
            field=models.ManyToManyField(
                to='base.weapontype', verbose_name='Available weapon types'
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                help_text='for powers with weapons',
                to='base.weapontype',
                verbose_name='Weapon requirement',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='trained_weapons',
            field=models.ManyToManyField(
                blank=True,
                help_text='Weapon training in addition to training by race and class',
                to='base.weapontype',
                verbose_name='Trained weapon',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='implement_types',
            field=models.ManyToManyField(
                limit_choices_to={'primary_end__isnull': True},
                related_name='implement_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='weapon_types',
            field=models.ManyToManyField(
                limit_choices_to={'primary_end__isnull': True},
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.CreateModel(
            name='MagicWeaponType',
            fields=[
                (
                    'magicitemtype_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='base.magicitemtype',
                    ),
                ),
                (
                    'weapon_groups',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ('CROSSBOW', 'Арбалет'),
                            ('UNARMED', 'Безоружное'),
                            ('MACE', 'Булава'),
                            ('POLEARM', 'Древковое'),
                            ('PICK', 'Кирка'),
                            ('SPEAR', 'Копьё'),
                            ('BOW', 'Лук'),
                            ('LIGHT_BLADE', 'Лёгкий клинок'),
                            ('HAMMER', 'Молот'),
                            ('STAFF', 'Посох'),
                            ('SLING', 'Праща'),
                            ('AXE', 'Топор'),
                            ('HEAVY_BLADE', 'Тяжелый клинок'),
                            ('FLAIL', 'Цеп'),
                        ],
                        max_length=97,
                        null=True,
                        verbose_name='Weapon group',
                    ),
                ),
                (
                    'weapon_categories',
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (1, 'Простое рукопашное'),
                            (2, 'Воинское рукопашное'),
                            (3, 'Превосходное рукопашное'),
                            (4, 'Простое дальнобойное'),
                            (5, 'Воинское дальнобойное'),
                            (6, 'Превосходное дальнобойное'),
                            (7, 'Инструмент'),
                        ],
                        max_length=13,
                        null=True,
                        verbose_name='Weapon category',
                    ),
                ),
                (
                    'crit_dice',
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (4, 'k4'),
                            (6, 'k6'),
                            (8, 'k8'),
                            (10, 'k10'),
                            (12, 'k12'),
                        ],
                        default=base.constants.constants.DiceIntEnum['D6'],
                        null=True,
                        verbose_name='Crit dice',
                    ),
                ),
                (
                    'crit_property',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name='Crit property',
                    ),
                ),
                (
                    'implement_type',
                    models.ForeignKey(
                        blank=True,
                        help_text='Does item has additional implement property?',
                        limit_choices_to={
                            'category': base.constants.constants.WeaponCategoryIntEnum[
                                'IMPLEMENT'
                            ]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='base.weapontype',
                        verbose_name='Implement type',
                    ),
                ),
                (
                    'weapon_types',
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={'is_enhanceable': True},
                        related_name='magic_weapons',
                        to='base.weapontype',
                        verbose_name='Weapon type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Magic weapon type',
                'verbose_name_plural': 'Magic weapon types',
            },
            bases=('base.magicitemtype',),
        ),
        migrations.AddField(
            model_name='npc',
            name='feet_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_feet',
                to='base.feetslotitem',
                verbose_name='Feet slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='gloves_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_arms',
                to='base.handsslotitem',
                verbose_name='Hands slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='head_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_heads',
                to='base.headslotitem',
                verbose_name='Head slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='neck_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_necks',
                to='base.neckslotitem',
                verbose_name='Neck slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='left_ring_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_left_rings',
                to='base.ringsslotitem',
                verbose_name='Left hand ring',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='right_ring_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_right_rings',
                to='base.ringsslotitem',
                verbose_name='Right hand ring',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='waist_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_waists',
                to='base.waistslotitem',
                verbose_name='Waist slot',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='weapon',
            unique_together={('magic_item_type', 'level', 'weapon_type')},
        ),
        migrations.AlterUniqueTogether(
            name='subclass',
            unique_together={('klass', 'subclass_id')},
        ),
    ]
