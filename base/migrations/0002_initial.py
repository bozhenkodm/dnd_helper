# Generated by Django 5.2.1 on 2025-05-09 14:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('printer', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='monster',
            name='avatar',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={'npc__isnull': True, 'pc__isnull': True},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='printer.avatar',
                verbose_name='Avatar',
            ),
        ),
        migrations.AddField(
            model_name='monster',
            name='source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='monsters',
            field=models.ManyToManyField(
                blank=True,
                through='base.CombatantMonster',
                to='base.monster',
                verbose_name='Monsters',
            ),
        ),
        migrations.AddField(
            model_name='combatantmonster',
            name='monster',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='combatants_monsters',
                to='base.monster',
                verbose_name='Monster',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='armor',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.armor',
                verbose_name='Armor',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='arms_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_hands',
                to='base.armsslotitem',
                verbose_name='Arms slot/shield',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='feats',
            field=models.ManyToManyField(
                blank=True, related_name='npcs', to='base.feat', verbose_name='Feats'
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='functional_template',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.functionaltemplate',
                verbose_name='Functional template',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='klass',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='base.class',
                verbose_name='Class',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='level_ability_bonuses',
            field=models.ManyToManyField(
                blank=True,
                related_name='npcs_for_level_bonuses',
                through='base.AbilityLevelBonus',
                to='base.ability',
                verbose_name='Ability level bonuses',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='owner',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='var_bonus_ability',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.ability',
                verbose_name='Selective ability bonus',
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='npcs',
            field=models.ManyToManyField(
                blank=True, to='base.npc', verbose_name='Мастерские персонажи'
            ),
        ),
        migrations.AddField(
            model_name='abilitylevelbonus',
            name='npc',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='base.npc'
            ),
        ),
        migrations.AddField(
            model_name='paragonpath',
            name='book_source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='paragonpath',
            name='klass',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.class',
                verbose_name='Class',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='paragon_path',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.paragonpath',
                verbose_name='Paragon path',
            ),
        ),
        migrations.AddField(
            model_name='bonus',
            name='paragon_path',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='bonuses',
                to='base.paragonpath',
                verbose_name='Paragon path',
            ),
        ),
        migrations.AddField(
            model_name='party',
            name='npc_members',
            field=models.ManyToManyField(
                blank=True, to='base.npc', verbose_name='Non player characters'
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='party',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.party',
                verbose_name='Party',
            ),
        ),
        migrations.AddField(
            model_name='party',
            name='members',
            field=models.ManyToManyField(
                to='base.playercharacter', verbose_name='Player characters'
            ),
        ),
        migrations.AddField(
            model_name='encounter',
            name='pcs',
            field=models.ManyToManyField(
                blank=True,
                through='base.CombatantPC',
                to='base.playercharacter',
                verbose_name='Player characters',
            ),
        ),
        migrations.AddField(
            model_name='combatantpc',
            name='pc',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='base.playercharacter',
                verbose_name='Игровой персонаж',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='attack_ability',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.ability',
                verbose_name='Attack ability',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='book_source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='damage_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'is_damage': True},
                related_name='powers',
                to='base.effect',
                verbose_name='Damage type',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='effects',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'is_damage': False},
                to='base.effect',
                verbose_name='Effects',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='functional_template',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.functionaltemplate',
                verbose_name='Functional template',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='klass',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.class',
                verbose_name='Class',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='magic_item_type',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.magicitemtype',
                verbose_name='Magic item type',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='paragon_path',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.paragonpath',
                verbose_name='Paragon path',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='powers',
            field=models.ManyToManyField(
                blank=True, related_name='npcs', to='base.power', verbose_name='Powers'
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='default_powers',
            field=models.ManyToManyField(
                blank=True,
                related_name='classes',
                to='base.power',
                verbose_name='Default powers',
            ),
        ),
        migrations.AddField(
            model_name='bonus',
            name='power',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={'frequency': 0, 'level': 0},
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='bonuses',
                related_query_name='bonus',
                to='base.power',
                verbose_name='Power',
            ),
        ),
        migrations.AddField(
            model_name='powerproperty',
            name='power',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='properties',
                to='base.power',
                verbose_name='Power',
            ),
        ),
        migrations.AddField(
            model_name='propertiescondition',
            name='constraint',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='scalar_conditions',
                to='base.constraint',
            ),
        ),
        migrations.AddField(
            model_name='race',
            name='book_source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='race',
            name='const_ability_bonus',
            field=models.ManyToManyField(
                related_name='races_with_const_ability',
                to='base.ability',
                verbose_name='Constant ability bonuses',
            ),
        ),
        migrations.AddField(
            model_name='race',
            name='var_ability_bonus',
            field=models.ManyToManyField(
                related_name='races',
                to='base.ability',
                verbose_name='Selective ability bonus',
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='race',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='paragonpath',
            name='race',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='race',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='bonus',
            name='race',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='bonuses',
                to='base.race',
                verbose_name='Race',
            ),
        ),
        migrations.AddField(
            model_name='itemstate',
            name='shield',
            field=models.ManyToManyField(
                blank=True, to='base.shieldtype', verbose_name='Shield type'
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='shields',
            field=models.ManyToManyField(
                blank=True, to='base.shieldtype', verbose_name='Available shields'
            ),
        ),
        migrations.AddField(
            model_name='availabilitycondition',
            name='shields',
            field=models.ManyToManyField(
                blank=True, to='base.shieldtype', verbose_name='Available shields'
            ),
        ),
        migrations.AddField(
            model_name='armsslotitem',
            name='shield_type',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.shieldtype',
                verbose_name='Shield',
            ),
        ),
        migrations.AddField(
            model_name='simplemagicitem',
            name='magic_item_type',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.magicitemtype',
                verbose_name='Magic item type',
            ),
        ),
        migrations.CreateModel(
            name='FeetSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='HandsSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='HeadSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='NeckSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='RingsSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.CreateModel(
            name='WaistSlotItem',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('base.simplemagicitem',),
        ),
        migrations.AddField(
            model_name='skill',
            name='based_on',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='base.ability'
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='skill',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.skill',
                verbose_name='Skill',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='trained_skills',
            field=models.ManyToManyField(
                blank=True,
                related_name='npcs',
                to='base.skill',
                verbose_name='Trained skills',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='mandatory_skills',
            field=models.ManyToManyField(
                related_name='classes_for_mandatory',
                to='base.skill',
                verbose_name='Mandatory skills',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='trainable_skills',
            field=models.ManyToManyField(
                related_name='classes',
                to='base.skill',
                verbose_name='Selective trainable skills',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='armor_types',
            field=models.ManyToManyField(
                blank=True,
                to='base.basearmortype',
                verbose_name='Available armor types',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='book_source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='default_feats',
            field=models.ManyToManyField(
                blank=True,
                related_name='subclasses',
                to='base.feat',
                verbose_name='Default feats',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='default_powers',
            field=models.ManyToManyField(
                blank=True,
                related_name='subclasses',
                to='base.power',
                verbose_name='Default powers',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='klass',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='subclasses',
                to='base.class',
                verbose_name='Class',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='shields',
            field=models.ManyToManyField(
                blank=True, to='base.shieldtype', verbose_name='Available shields'
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='subclass',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={'subclass_id__gt': 0},
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='powers',
                to='base.subclass',
                verbose_name='Subclass',
            ),
        ),
        migrations.AddField(
            model_name='bonus',
            name='subclass',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='bonuses',
                to='base.subclass',
                verbose_name='Subclass',
            ),
        ),
        migrations.AddField(
            model_name='weapon',
            name='magic_item_type',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.magicitemtype',
                verbose_name='Magic item type',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='no_hand',
            field=models.ForeignKey(
                blank=True,
                help_text="Armament that doesn't take hand slot",
                limit_choices_to={
                    'weapon_type__handedness__is_one_handed__isnull': True
                },
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_no_hands',
                to='base.weapon',
                verbose_name='No hand implement',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='primary_hand',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(
                    ('weapon_type__handedness__is_one_handed__isnull', True),
                    _negated=True,
                ),
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_primary_hands',
                to='base.weapon',
                verbose_name='Primary hand',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='secondary_hand',
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(
                    ('weapon_type__handedness__is_one_handed__isnull', True),
                    _negated=True,
                ),
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='in_secondary_hands',
                to='base.weapon',
                verbose_name='Secondary hand',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='weapon_categories',
            field=models.ManyToManyField(
                blank=True,
                to='base.weaponcategory',
                verbose_name='Available weapon categories',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='weapon_categories',
            field=models.ManyToManyField(
                blank=True,
                to='base.weaponcategory',
                verbose_name='Available weapon categories',
            ),
        ),
        migrations.AddField(
            model_name='availabilitycondition',
            name='weapon_categories',
            field=models.ManyToManyField(
                blank=True,
                to='base.weaponcategory',
                verbose_name='Available weapon categories',
            ),
        ),
        migrations.AddField(
            model_name='weaponstate',
            name='categories',
            field=models.ManyToManyField(
                blank=True, to='base.weaponcategory', verbose_name='Weapon category'
            ),
        ),
        migrations.AddField(
            model_name='weaponstate',
            name='groups',
            field=models.ManyToManyField(
                blank=True, to='base.weapongroup', verbose_name='Weapon groups'
            ),
        ),
        migrations.AddField(
            model_name='weaponstate',
            name='handedness',
            field=models.ManyToManyField(
                blank=True, to='base.weaponhandedness', verbose_name='Handedness'
            ),
        ),
        migrations.AddField(
            model_name='itemstate',
            name='primary_hand',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='primary_hands',
                to='base.weaponstate',
                verbose_name='Primary hand',
            ),
        ),
        migrations.AddField(
            model_name='itemstate',
            name='secondary_hand',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='secondary_hands',
                to='base.weaponstate',
                verbose_name='Secondary hand',
            ),
        ),
        migrations.AddField(
            model_name='weapontype',
            name='book_source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.booksource',
                verbose_name='Source',
            ),
        ),
        migrations.AddField(
            model_name='weapontype',
            name='category',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='base.weaponcategory',
                verbose_name='Category',
            ),
        ),
        migrations.AddField(
            model_name='weapontype',
            name='groups',
            field=models.ManyToManyField(to='base.weapongroup', verbose_name='Groups'),
        ),
        migrations.AddField(
            model_name='weapontype',
            name='handedness',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='base.weaponhandedness',
                verbose_name='Handedness',
            ),
        ),
        migrations.AddField(
            model_name='weapontype',
            name='primary_end',
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='secondary_end',
                to='base.weapontype',
                verbose_name='Primary end',
            ),
        ),
        migrations.AddField(
            model_name='weaponstate',
            name='type',
            field=models.ManyToManyField(
                blank=True,
                related_name='primary_hand_conditions',
                to='base.weapontype',
                verbose_name='Weapon type',
            ),
        ),
        migrations.AddField(
            model_name='weapon',
            name='weapon_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='weapons',
                to='base.weapontype',
                verbose_name='Weapon type',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='implement_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='implement_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available implement types',
            ),
        ),
        migrations.AddField(
            model_name='subclass',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='weapon_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AddField(
            model_name='race',
            name='weapon_types',
            field=models.ManyToManyField(
                to='base.weapontype', verbose_name='Available weapon types'
            ),
        ),
        migrations.AddField(
            model_name='power',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                help_text='for powers with weapons',
                to='base.weapontype',
                verbose_name='Weapon requirement',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='trained_weapons',
            field=models.ManyToManyField(
                blank=True,
                help_text='Weapon training in addition to training by race and class',
                to='base.weapontype',
                verbose_name='Trained weapon',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='implement_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='implement_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available implement types',
            ),
        ),
        migrations.AddField(
            model_name='class',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='weapon_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AddField(
            model_name='availabilitycondition',
            name='implement_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='implement_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available implement types',
            ),
        ),
        migrations.AddField(
            model_name='availabilitycondition',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'primary_end__isnull': True},
                related_name='weapon_%(app_label)s_%(class)s_wielders',
                to='base.weapontype',
                verbose_name='Available weapon types',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='booksource',
            unique_together={('book', 'book_number', 'page_number', 'is_english')},
        ),
        migrations.AddField(
            model_name='magicarmitemtype',
            name='shield_slots',
            field=models.ManyToManyField(
                blank=True, to='base.shieldtype', verbose_name='Shield slots'
            ),
        ),
        migrations.AddField(
            model_name='magicarmortype',
            name='armor_type_slots',
            field=models.ManyToManyField(
                to='base.basearmortype', verbose_name='Armor type slots'
            ),
        ),
        migrations.AddField(
            model_name='magicweapontype',
            name='implement_type',
            field=models.ForeignKey(
                blank=True,
                help_text='Does item has additional implement property?',
                limit_choices_to={'category__code': 7},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='base.weapontype',
                verbose_name='Implement type',
            ),
        ),
        migrations.AddField(
            model_name='magicweapontype',
            name='weapon_categories',
            field=models.ManyToManyField(
                blank=True, to='base.weaponcategory', verbose_name='Weapon category'
            ),
        ),
        migrations.AddField(
            model_name='magicweapontype',
            name='weapon_groups',
            field=models.ManyToManyField(
                blank=True, to='base.weapongroup', verbose_name='Weapon group'
            ),
        ),
        migrations.AddField(
            model_name='magicweapontype',
            name='weapon_types',
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={'is_enhanceable': True},
                related_name='magic_weapons',
                to='base.weapontype',
                verbose_name='Weapon type',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='abilitylevelbonus',
            unique_together={('ability', 'npc', 'level')},
        ),
        migrations.AlterUniqueTogether(
            name='armsslotitem',
            unique_together={('magic_item_type', 'level', 'shield_type')},
        ),
        migrations.AlterUniqueTogether(
            name='simplemagicitem',
            unique_together={('magic_item_type', 'level')},
        ),
        migrations.AddField(
            model_name='npc',
            name='feet_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_feet',
                to='base.feetslotitem',
                verbose_name='Feet slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='gloves_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_arms',
                to='base.handsslotitem',
                verbose_name='Hands slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='head_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_heads',
                to='base.headslotitem',
                verbose_name='Head slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='neck_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_necks',
                to='base.neckslotitem',
                verbose_name='Neck slot',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='left_ring_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_left_rings',
                to='base.ringsslotitem',
                verbose_name='Left hand ring',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='right_ring_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_right_rings',
                to='base.ringsslotitem',
                verbose_name='Right hand ring',
            ),
        ),
        migrations.AddField(
            model_name='npc',
            name='waist_slot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='npc_waists',
                to='base.waistslotitem',
                verbose_name='Waist slot',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='weapon',
            unique_together={('magic_item_type', 'level', 'weapon_type')},
        ),
        migrations.AlterUniqueTogether(
            name='subclass',
            unique_together={('klass', 'subclass_id')},
        ),
    ]
